package com.mycompany.sysdev;

import java.io.IOException;
import java.util.List;
import java.util.Scanner;


public class Menu {
    private static Scanner scanner = new Scanner(System.in);
    private static Goods goods = new Goods();
    private static MemberManager memberManager = new MemberManager(); 

    public static void main(String[] args) {
        System.out.println("商品情報を読み込んでいます...");
        goods.loadGoodsFromCSV(); // 商品情報の読み込み
        System.out.println("読み込み完了。登録されている商品数: " + goods.getGoodsList().size());
        mainMenu();
    }

    public static void mainMenu() {
        while (true) {
            
            System.out.println("商品情報を読み込んでいます...");
            goods.loadGoodsFromCSV(); // 商品情報の読み込み
            System.out.println("読み込み完了。登録されている商品数: " + goods.getGoodsList().size());   
            
            System.out.println("***** スタッフメインメニュー *****");
            System.out.println("1: レンタルメニュー");
            System.out.println("2: 会員情報管理メニュー");
            System.out.println("3: 商品情報管理メニュー");
            System.out.println("0: 終了");
            System.out.print("入力＞ ");
            int choice = scanner.nextInt();
            scanner.nextLine(); // 改行を消費

            switch (choice) {
                case 1:
                    rentalMenu();
                    break;
                case 2:
                    //System.out.println("会員情報管理メニューは未実装です。");  
                    memberManagementMenu(); // 会員情報管理メニューへ
                    break;
                case 3:
                    goods.goodsManageMenu(scanner); // 商品情報管理メニューへ
                    break;
                case 0:
                    if (confirmExit()) {
                        System.out.println("プログラムを終了します。");
                        return;
                    } else {
                        System.out.println("メインメニューに戻ります。");
                    }
                    break;
                default:
                    System.out.println("無効な入力です。再度入力してください。");
            }
        }
    }
    
    private static void rentalMenu() {
        while (true) {
            System.out.println("***** レンタルメニュー *****");
            System.out.println("1: 貸出");
            System.out.println("2: 返却");
            System.out.println("0: スタッフメインメニューに戻る");
            System.out.print("入力＞ ");
            int choice = scanner.nextInt();
            scanner.nextLine(); // consume newline

            switch (choice) {
                case 1:
                    Lend.lendMenu();
                    break;
                case 2:
                    Ret.retMenu();
                    break;
                case 0:
                    return; // メインメニューに戻る
                default:
                    System.out.println("無効な入力です。再度入力してください。");
            }
        }   
    }
    /*
     * 関数名            : memberManagementMenu
     * 機能              : 【D-1120】会員情報管理メニューを表示し、ユーザーの選択に基づき会員の登録、変更、削除の処理を行う
     * 入力パラメータ    : なし
     * 出力パラメータ    : なし
     * 戻り値            : void
     * 特記事項          : 
     *                      - ユーザーが入力した選択肢に応じて、registerMemberFlow または modifyOrDeleteMemberFlow を呼び出す。
     *                      - 無効な入力があった場合、再度入力を促す。
     *                      - "0"を選択すると、スタッフメインメニューに戻る。
     */
    private static void memberManagementMenu() {
        while (true) {
            System.out.println("***** 会員情報管理メニュー *****");
            System.out.println("1: 新規会員登録");
            System.out.println("2: 会員情報の変更または削除");
            System.out.println("3: 会員情報の一覧表示");
            System.out.println("0: スタッフメインメニューに戻る");
            System.out.print("入力＞ ");
            int choice = scanner.nextInt();
            scanner.nextLine();

            switch (choice) {
                case 1:
                    registerMemberFlow();
                    break;
                case 2:
                    modifyOrDeleteMemberFlow();
                    break;
                case 3:
                    displayAllMembers(); // 新しいメソッドを呼び出す
                    break;
                case 0:
                    return;
                default:
                    System.out.println("無効な入力です。再度入力してください。");
            }
        }
    }private static void displayAllMembers() {
    System.out.println("***** 会員情報一覧 *****");
    
    // メンバーリストを取得
    List<Member> members = memberManager.getMembers();

    if (members.isEmpty()) {
        System.out.println("現在登録されている会員はいません。");
        return;
    }

    // ヘッダーを表示
    System.out.printf("%-12s %-20s %-20s %-15s %-10s%n", "会員ID", "名前", "住所", "電話番号", "生年月日");
    System.out.println("-------------------------------------------------------------------------------");

    // 各メンバーを表示
    for (Member member : members) {
        System.out.printf(
            "%-12s %-20s %-20s %-15s %-10s%n",
            member.getId(),
            member.getName(),
            member.getAddress(),
            member.getPhone(),
            formatBirthDate(member.getBirthDate())
        );
    }
    System.out.println("-------------------------------------------------------------------------------");
}

    /*
     * 関数名            : registerMemberFlow
     * 機能              : 【D-1122】新規会員登録のためのフローを管理し、ユーザーの入力に基づいて会員情報の入力および確認を行う
     * 入力パラメータ    : なし
     * 出力パラメータ    : なし
     * 戻り値            : void
     * 特記事項          : 
     *                      - ユーザーが情報入力を選択した場合、inputNewMember メソッドを呼び出して新規会員情報を取得する。
     *                      - 新規会員情報が正しく入力された場合、confirmAndRegisterMember メソッドを通じて会員を登録する。
     *                      - "0"を選択すると、会員情報管理メニューに戻る。
     */
    private static void registerMemberFlow() {
        while (true) {
            Member newMember = inputNewMember();
            confirmAndRegisterMember(newMember);
            return;
        }
    }
    /*
     * 関数名            : inputNewMember
     * 機能              : 【D-1122】ユーザーから新規会員情報を入力として受け取り、Member オブジェクトを生成する
     * 入力パラメータ    : なし
     * 出力パラメータ    : なし
     * 戻り値            : Member : 入力された情報に基づいて生成された新規会員オブジェクト
     * 特記事項          : 
     *                      - ユーザーから名前、住所、電話番号、生年月日を順に入力として受け取る。
     *                      - 生年月日は "yyyyMMdd" 形式でフォーマットされる。
     *                      - 会員IDは "99" + 現在の日付（"yyyyMMdd"） + 当日の会員数に基づく2桁の連番で生成される。
     *                      - 入力された電話番号や生年月日に対するバリデーションは行われていないため、必要に応じて追加すること。
     */   
    private static Member inputNewMember() {
        System.out.print("名前を入力してください＞ ");
        String name = scanner.nextLine();

        System.out.print("住所を入力してください＞ ");
        String address = scanner.nextLine();

        System.out.print("電話番号を入力してください（形式: 000-0000-0000）＞ ");
        String phone = scanner.nextLine();

        System.out.print("生年月日を入力してください（形式: yyyyMMdd）＞ ");
        String birthDate = scanner.nextLine();

        String memberId = memberManager.addMember(name, address, phone, birthDate);
        if (memberId == null) {
            System.out.println("会員登録に失敗しました。もう一度入力してください。");
            return null;
        }

        return new Member(memberId, name, address, phone, birthDate);
    }
    /*
     * 関数名            : confirmAndRegisterMember
     * 機能              : 【D-1123】入力された新規会員情報を確認し、ユーザーの承認に基づいて会員を登録する
     * 入力パラメータ    : 
     *                      Member member : 登録を確認および実行する対象の会員オブジェクト
     * 出力パラメータ    : なし
     * 戻り値            : void
     * 特記事項          : 
     *                      - ユーザーが会員情報の登録を承認した場合、MemberManager の addMember メソッドを呼び出して会員を登録する。
     *                      - 登録後、スタッフメインメニューに戻る。
     *                      - ユーザーがキャンセルを選択した場合、登録フローを中断し、新規会員情報入力画面に戻る。
     *                      - 会員情報の保存中に IOException が発生した場合、エラーメッセージを表示する。
     */
    private static void confirmAndRegisterMember(Member member) {
        if (member == null) {
            return;
        }
        System.out.println("以下の会員情報で登録します：");
        System.out.println("ID: " + member.getId());
        System.out.println("名前: " + member.getName());
        System.out.println("住所: " + member.getAddress());
        System.out.println("電話番号: " + member.getPhone());
        System.out.println("生年月日: " + formatBirthDate(member.getBirthDate()));

        System.out.print("登録してよろしいですか？(Y / N)＞ ");
        String input = scanner.nextLine().trim().toUpperCase();
        if (input.equals("Y")) {
            System.out.println("会員登録が完了しました！");
        } else {
            System.out.println("会員登録をキャンセルしました。");
        }
    }
    /*
     * 関数名            : modifyOrDeleteMemberFlow
     * 機能              : 【D-1121, 1123】指定された会員IDに基づき、会員情報の変更または削除のフローを管理する
     * 入力パラメータ    : なし
     * 出力パラメータ    : なし
     * 戻り値            : void
     * 特記事項          : 
     *                      - ユーザーが "0" を入力した場合、会員情報管理メニューに戻る。
     *                      - 指定された会員IDが存在しない場合、エラーメッセージを表示し、再入力を促す。
     *                      - 会員情報が確認された後、ユーザーは情報の変更または削除を選択できる。
     *                      - 選択に応じて、modifyMember または deleteMember メソッドを呼び出す。
     *                      - 操作完了後、スタッフメインメニューに戻る。
     */
    private static void modifyOrDeleteMemberFlow() {
        System.out.print("変更または削除する会員IDを入力してください＞ ");
        String memberId = scanner.nextLine();

        Member member = memberManager.getMemberById(memberId);
        if (member == null) {
            System.out.println("指定されたIDの会員が見つかりませんでした。");
            return;
        }

        System.out.println("会員情報を表示します：");
        System.out.println("ID: " + member.getId());
        System.out.println("名前: " + member.getName());
        System.out.println("住所: " + member.getAddress());
        System.out.println("電話番号: " + member.getPhone());
        System.out.println("生年月日: " + formatBirthDate(member.getBirthDate()));

        System.out.println("1: 会員情報を変更");
        System.out.println("2: 会員情報を削除");
        System.out.println("0: メニューに戻る");
        System.out.print("入力＞ ");
        int choice = scanner.nextInt();
        scanner.nextLine();

        switch (choice) {
            case 1:
                modifyMember(member);
                break;
            case 2:
                deleteMember(member);
                break;
            case 0:
                return;
            default:
                System.out.println("無効な入力です。");
        }
    }
    /*
     * 関数名            : modifyMember
     * 機能              : 【D-1125】指定された会員の情報を変更し、更新内容を保存する
     * 入力パラメータ    : 
     *                      Member member : 変更対象の会員オブジェクト
     * 出力パラメータ    : なし
     * 戻り値            : void2
     * 特記事項          : 
     *                      - ユーザーが情報変更を選択した場合、各項目の新しい値を入力として受け取る。
     *                      - 未入力の項目は変更されない。
     *                      - 変更内容の確認後、MemberManager の 2s メソッドを呼び出して変更を保存する。
     *                      - 保存に成功した場合、スタッフメインメニューに戻る。
     *                      - 保存中に IOException が発生した場合、エラーメッセージを表示する。
     */
    private static void modifyMember(Member member) {
        // 現在の情報を表示
        System.out.println("----- 現在の会員情報 -----");
        System.out.println("ID        : " + member.getId());
        System.out.println("名前      : " + member.getName());
        System.out.println("住所      : " + member.getAddress());
        System.out.println("電話番号  : " + member.getPhone());
        System.out.println("生年月日  : " + formatBirthDate(member.getBirthDate()));
        System.out.println("---------------------------------");
    
        System.out.println("変更したい項目の新しい値を入力してください。");
        System.out.println("※変更しない場合は空欄のままEnterを押してください。");
    
        // 名前の変更
        System.out.print("名前（現在：" + member.getName() + "）＞ ");
        String newName = scanner.nextLine().trim();
        if (!newName.isEmpty()) {
            member.setName(newName);
        }
    
        // 住所の変更
        System.out.print("住所（現在：" + member.getAddress() + "）＞ ");
        String newAddress = scanner.nextLine().trim();
        if (!newAddress.isEmpty()) {
            member.setAddress(newAddress);
        }
    
        // 電話番号の変更
        System.out.print("電話番号（現在：" + member.getPhone() + "）＞ ");
        String newPhone = scanner.nextLine().trim();
        if (!newPhone.isEmpty()) {
            member.setPhone(newPhone);
        }
    
        // 生年月日の変更 (yyyyMMdd 形式)
        System.out.print("生年月日（現在：" + member.getBirthDate() + " / 形式: yyyyMMdd）＞ ");
        String newBirthDate = scanner.nextLine().trim();
        if (!newBirthDate.isEmpty()) {
            member.setBirthDate(newBirthDate);
        }
    
        // 変更結果の確認
        System.out.println("\n----- 変更後の会員情報 -----");
        System.out.println("ID        : " + member.getId());
        System.out.println("名前      : " + member.getName());
        System.out.println("住所      : " + member.getAddress());
        System.out.println("電話番号  : " + member.getPhone());
        System.out.println("生年月日  : " + formatBirthDate(member.getBirthDate()));
        System.out.println("---------------------------------");
    
        // 保存の最終確認
        System.out.print("この内容で情報を更新してよろしいですか？(Y / N)＞ ");
        String input = scanner.nextLine().trim().toUpperCase();
    
        if (input.equals("Y")) {
            // 変更内容をCSVに保存
            try {
                memberManager.saveMembers(); // 全会員のリストをCSVに書き込み
                System.out.println("会員情報の更新が完了しました。");
            } catch (IOException e) {
                System.out.println("会員情報の更新中にエラーが発生しました。");
                System.out.println("エラー内容: " + e.getMessage());
            }
        } else {
            System.out.println("更新をキャンセルしました。");
        }
    }
    
    /*
     * 関数名            : deleteMember
     * 機能              : 【D-1127】指定された会員を削除し、CSVファイルを更新する
     * 入力パラメータ    : 
     *                      Member member : 削除対象の会員オブジェクト
     * 出力パラメータ    : なし
     * 戻り値            : void
     * 特記事項          : 
     *                      - ユーザーの確認に基づき、会員の削除を実行する。
     *                      - 削除が成功した場合、スタッフメインメニューに戻る。
     *                      - 削除が失敗した場合、エラーメッセージを表示する。
     *                      - 削除操作後、MemberManager の deleteMemberById メソッドを呼び出してCSVファイルを更新する。
     */
    private static void deleteMember(Member member) {
        System.out.println("以下の会員情報を削除します：");
    System.out.println("ID: " + member.getId());
    System.out.println("名前: " + member.getName());
    System.out.println("住所: " + member.getAddress());
    System.out.println("電話番号: " + member.getPhone());
    System.out.println("生年月日: " + formatBirthDate(member.getBirthDate()));

    System.out.print("本当に削除してよろしいですか？(Y / N)＞ ");
    String input = scanner.nextLine().trim().toUpperCase();
    
    if (input.equals("Y")) {
        boolean success = memberManager.deleteMemberById(member.getId());
        if (success) {
            System.out.println("会員ID " + member.getId() + " の削除が完了しました。");
        } else {
            System.out.println("会員削除中にエラーが発生しました。");
        }
    } else {
        System.out.println("会員削除をキャンセルしました。");
    }
    }

    private static String formatBirthDate(String birthDate) {
        if (birthDate.length() == 8) {
            return birthDate.substring(0, 4) + "/" + birthDate.substring(4, 6) + "/" + birthDate.substring(6, 8);
        }
        return birthDate; // Return original if invalid
    }

    private static boolean confirmExit() {
        while (true) {
            System.out.print("プログラムを終了してもよろしいですか？(Y / N)＞ ");
            String input = scanner.nextLine().trim().toUpperCase();
            if (input.equals("Y")) {
                return true;
            } else if (input.equals("N")) {
                return false;
            } else {
                System.out.println("無効な入力です。'Y' または 'N' を入力してください。");
            }
        }
    }
}